/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/auth/login/": {
    /**
     * @description Check the credentials and return the REST Token
     * if the credentials are valid and authenticated.
     * Calls Django Auth login method to register User ID
     * in Django session framework
     *
     * Accept the following POST parameters: username, password
     * Return the REST Framework Token Object's key.
     */
    post: operations["auth_login_create"];
  };
  "/api/auth/logout/": {
    /**
     * @description Calls Django logout method and delete the Token object
     * assigned to the current User object.
     *
     * Accepts/Returns nothing.
     */
    post: operations["auth_logout_create"];
  };
  "/api/auth/password/change/": {
    /**
     * @description Calls Django Auth SetPasswordForm save method.
     *
     * Accepts the following POST parameters: new_password1, new_password2
     * Returns the success/fail message.
     */
    post: operations["auth_password_change_create"];
  };
  "/api/auth/password/reset/": {
    /**
     * @description Calls Django Auth PasswordResetForm save method.
     *
     * Accepts the following POST parameters: email
     * Returns the success/fail message.
     */
    post: operations["auth_password_reset_create"];
  };
  "/api/auth/password/reset/confirm/": {
    /**
     * @description Password reset e-mail link is confirmed, therefore
     * this resets the user's password.
     *
     * Accepts the following POST parameters: token, uid,
     *     new_password1, new_password2
     * Returns the success/fail message.
     */
    post: operations["auth_password_reset_confirm_create"];
  };
  "/api/auth/user/": {
    /**
     * @description Reads and updates UserModel fields
     * Accepts GET, PUT, PATCH methods.
     *
     * Default accepted fields: username, first_name, last_name
     * Default display fields: pk, username, email, first_name, last_name
     * Read-only fields: pk, email
     *
     * Returns UserModel fields.
     */
    get: operations["auth_user_retrieve"];
    /**
     * @description Reads and updates UserModel fields
     * Accepts GET, PUT, PATCH methods.
     *
     * Default accepted fields: username, first_name, last_name
     * Default display fields: pk, username, email, first_name, last_name
     * Read-only fields: pk, email
     *
     * Returns UserModel fields.
     */
    put: operations["auth_user_update"];
    /**
     * @description Reads and updates UserModel fields
     * Accepts GET, PUT, PATCH methods.
     *
     * Default accepted fields: username, first_name, last_name
     * Default display fields: pk, username, email, first_name, last_name
     * Read-only fields: pk, email
     *
     * Returns UserModel fields.
     */
    patch: operations["auth_user_partial_update"];
  };
  "/api/schema/": {
    /**
     * @description OpenApi3 schema for this API. Format can be selected via content negotiation.
     *
     * - YAML: application/vnd.oai.openapi
     * - JSON: application/vnd.oai.openapi+json
     */
    get: operations["schema_retrieve"];
  };
  "/api/v1/aprs/passcode-generator/": {
    /** @description Get the APRS passcode from a callsign */
    post: operations["v1_aprs_passcode_generator_create"];
  };
  "/api/v1/associations/association/": {
    /** @description ViewSet for Association model. */
    get: operations["v1_associations_association_list"];
    /**
     * @description Create a list of model instances if a list is provided or a
     * single model instance otherwise.
     */
    post: operations["v1_associations_association_create"];
  };
  "/api/v1/associations/association/{id}/": {
    /** @description ViewSet for Association model. */
    get: operations["v1_associations_association_retrieve"];
    /** @description ViewSet for Association model. */
    put: operations["v1_associations_association_update"];
    /** @description ViewSet for Association model. */
    delete: operations["v1_associations_association_destroy"];
    /** @description ViewSet for Association model. */
    patch: operations["v1_associations_association_partial_update"];
  };
  "/api/v1/repeaters/dim-dmr/": {
    /** @description ViewSet for DimDmr model. */
    get: operations["v1_repeaters_dim_dmr_list"];
    /**
     * @description Create a list of model instances if a list is provided or a
     * single model instance otherwise.
     */
    post: operations["v1_repeaters_dim_dmr_create"];
  };
  "/api/v1/repeaters/dim-dmr-tg/": {
    /** @description ViewSet for DimDmrTg model. */
    get: operations["v1_repeaters_dim_dmr_tg_list"];
    /**
     * @description Create a list of model instances if a list is provided or a
     * single model instance otherwise.
     */
    post: operations["v1_repeaters_dim_dmr_tg_create"];
  };
  "/api/v1/repeaters/dim-dmr-tg/{id}/": {
    /** @description ViewSet for DimDmrTg model. */
    get: operations["v1_repeaters_dim_dmr_tg_retrieve"];
    /** @description ViewSet for DimDmrTg model. */
    put: operations["v1_repeaters_dim_dmr_tg_update"];
    /** @description ViewSet for DimDmrTg model. */
    delete: operations["v1_repeaters_dim_dmr_tg_destroy"];
    /** @description ViewSet for DimDmrTg model. */
    patch: operations["v1_repeaters_dim_dmr_tg_partial_update"];
  };
  "/api/v1/repeaters/dim-dmr/{id}/": {
    /** @description ViewSet for DimDmr model. */
    get: operations["v1_repeaters_dim_dmr_retrieve"];
    /** @description ViewSet for DimDmr model. */
    put: operations["v1_repeaters_dim_dmr_update"];
    /** @description ViewSet for DimDmr model. */
    delete: operations["v1_repeaters_dim_dmr_destroy"];
    /** @description ViewSet for DimDmr model. */
    patch: operations["v1_repeaters_dim_dmr_partial_update"];
  };
  "/api/v1/repeaters/dim-dstar/": {
    /** @description ViewSet for DimDstar model. */
    get: operations["v1_repeaters_dim_dstar_list"];
    /**
     * @description Create a list of model instances if a list is provided or a
     * single model instance otherwise.
     */
    post: operations["v1_repeaters_dim_dstar_create"];
  };
  "/api/v1/repeaters/dim-dstar/{id}/": {
    /** @description ViewSet for DimDstar model. */
    get: operations["v1_repeaters_dim_dstar_retrieve"];
    /** @description ViewSet for DimDstar model. */
    put: operations["v1_repeaters_dim_dstar_update"];
    /** @description ViewSet for DimDstar model. */
    delete: operations["v1_repeaters_dim_dstar_destroy"];
    /** @description ViewSet for DimDstar model. */
    patch: operations["v1_repeaters_dim_dstar_partial_update"];
  };
  "/api/v1/repeaters/dim-fm/": {
    /** @description ViewSet for DimFm model. */
    get: operations["v1_repeaters_dim_fm_list"];
    /**
     * @description Create a list of model instances if a list is provided or a
     * single model instance otherwise.
     */
    post: operations["v1_repeaters_dim_fm_create"];
  };
  "/api/v1/repeaters/dim-fm/{id}/": {
    /** @description ViewSet for DimFm model. */
    get: operations["v1_repeaters_dim_fm_retrieve"];
    /** @description ViewSet for DimFm model. */
    put: operations["v1_repeaters_dim_fm_update"];
    /** @description ViewSet for DimFm model. */
    delete: operations["v1_repeaters_dim_fm_destroy"];
    /** @description ViewSet for DimFm model. */
    patch: operations["v1_repeaters_dim_fm_partial_update"];
  };
  "/api/v1/repeaters/dim-fusion/": {
    /** @description ViewSet for DimFusion model. */
    get: operations["v1_repeaters_dim_fusion_list"];
    /**
     * @description Create a list of model instances if a list is provided or a
     * single model instance otherwise.
     */
    post: operations["v1_repeaters_dim_fusion_create"];
  };
  "/api/v1/repeaters/dim-fusion/{id}/": {
    /** @description ViewSet for DimFusion model. */
    get: operations["v1_repeaters_dim_fusion_retrieve"];
    /** @description ViewSet for DimFusion model. */
    put: operations["v1_repeaters_dim_fusion_update"];
    /** @description ViewSet for DimFusion model. */
    delete: operations["v1_repeaters_dim_fusion_destroy"];
    /** @description ViewSet for DimFusion model. */
    patch: operations["v1_repeaters_dim_fusion_partial_update"];
  };
  "/api/v1/repeaters/dim-location/": {
    /** @description ViewSet for DimLocation model. */
    get: operations["v1_repeaters_dim_location_list"];
    /**
     * @description Create a list of model instances if a list is provided or a
     * single model instance otherwise.
     */
    post: operations["v1_repeaters_dim_location_create"];
  };
  "/api/v1/repeaters/dim-location/{id}/": {
    /** @description ViewSet for DimLocation model. */
    get: operations["v1_repeaters_dim_location_retrieve"];
    /** @description ViewSet for DimLocation model. */
    put: operations["v1_repeaters_dim_location_update"];
    /** @description ViewSet for DimLocation model. */
    delete: operations["v1_repeaters_dim_location_destroy"];
    /** @description ViewSet for DimLocation model. */
    patch: operations["v1_repeaters_dim_location_partial_update"];
  };
  "/api/v1/repeaters/dim-rf/": {
    /** @description ViewSet for DimRf model. */
    get: operations["v1_repeaters_dim_rf_list"];
    /**
     * @description Create a list of model instances if a list is provided or a
     * single model instance otherwise.
     */
    post: operations["v1_repeaters_dim_rf_create"];
  };
  "/api/v1/repeaters/dim-rf/{id}/": {
    /** @description ViewSet for DimRf model. */
    get: operations["v1_repeaters_dim_rf_retrieve"];
    /** @description ViewSet for DimRf model. */
    put: operations["v1_repeaters_dim_rf_update"];
    /** @description ViewSet for DimRf model. */
    delete: operations["v1_repeaters_dim_rf_destroy"];
    /** @description ViewSet for DimRf model. */
    patch: operations["v1_repeaters_dim_rf_partial_update"];
  };
  "/api/v1/repeaters/dim-tetra/": {
    /** @description ViewSet for DimTetra model. */
    get: operations["v1_repeaters_dim_tetra_list"];
    /**
     * @description Create a list of model instances if a list is provided or a
     * single model instance otherwise.
     */
    post: operations["v1_repeaters_dim_tetra_create"];
  };
  "/api/v1/repeaters/dim-tetra/{id}/": {
    /** @description ViewSet for DimTetra model. */
    get: operations["v1_repeaters_dim_tetra_retrieve"];
    /** @description ViewSet for DimTetra model. */
    put: operations["v1_repeaters_dim_tetra_update"];
    /** @description ViewSet for DimTetra model. */
    delete: operations["v1_repeaters_dim_tetra_destroy"];
    /** @description ViewSet for DimTetra model. */
    patch: operations["v1_repeaters_dim_tetra_partial_update"];
  };
  "/api/v1/repeaters/fact-repeater/": {
    /** @description ViewSet for FactRepeater model. */
    get: operations["v1_repeaters_fact_repeater_list"];
    /**
     * @description Create a list of model instances if a list is provided or a
     * single model instance otherwise.
     */
    post: operations["v1_repeaters_fact_repeater_create"];
  };
  "/api/v1/repeaters/fact-repeater/{id}/": {
    /** @description ViewSet for FactRepeater model. */
    get: operations["v1_repeaters_fact_repeater_retrieve"];
    /** @description ViewSet for FactRepeater model. */
    put: operations["v1_repeaters_fact_repeater_update"];
    /** @description ViewSet for FactRepeater model. */
    delete: operations["v1_repeaters_fact_repeater_destroy"];
    /** @description ViewSet for FactRepeater model. */
    patch: operations["v1_repeaters_fact_repeater_partial_update"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** @description Models enough information for describing a ham radio association. */
    Association: {
      id: number;
      /** Abrv. */
      abrv: string;
      name?: string;
      /**
       * E-mail
       * Format: email
       */
      email?: string;
      /** Format: uri */
      website?: string;
      notes?: string;
    };
    /**
     * @description * `NFM` - narrow
     * * `WFM` - wide
     * @enum {string}
     */
    BandwidthEnum: "NFM" | "WFM";
    /**
     * @description * `GROUP_CALL` - Group Call
     * * `PRIVATE_CALL` - Private Call
     * @enum {string}
     */
    CallModeEnum: "GROUP_CALL" | "PRIVATE_CALL";
    /** @description Serializer for the callsign. */
    Callsign: {
      callsign: string;
    };
    /** @description Models enough information for describing DMR repeaters. */
    DimDmr: {
      id: number;
      tg: components["schemas"]["DimDmrTg"];
      ts1_default_tg: components["schemas"]["DimDmrTg"];
      ts2_default_tg: components["schemas"]["DimDmrTg"];
      ts1_alternative_tgs: components["schemas"]["DimDmrTg"][];
      ts2_alternative_tgs: components["schemas"]["DimDmrTg"][];
      /** C.C. */
      color_code: number;
      /** TS config. */
      ts_configuration?: string;
    };
    /** @description Models enough information for describing a DMR TG. */
    DimDmrTg: {
      /** DMR ID */
      id: number;
      name: string;
      call_mode?: components["schemas"]["CallModeEnum"];
    };
    /** @description Models enough information for describing D-STAR repeaters. */
    DimDstar: {
      id: number;
      gateway?: string;
      reflector?: string;
    };
    /** @description Models enough information for describing FM repeaters. */
    DimFm: {
      id: number;
      modulation?: string;
      /** Format: decimal */
      tone?: string | null;
      bandwidth?: components["schemas"]["BandwidthEnum"];
    };
    /** @description Models enough information for describing Fusion/C4FM repeaters. */
    DimFusion: {
      id: number;
      wiresx?: string;
      room_id?: string;
    };
    /** @description Models enough information for describing a repeater's location. */
    DimLocation: {
      id: number;
      /** Format: decimal */
      latitude?: string | null;
      /** Format: decimal */
      longitude?: string | null;
      region?: components["schemas"]["RegionEnum"];
      place?: string;
      /** QTH loc. */
      qth_loc: string;
    };
    /** @description Models the frequency information of repeaters. */
    DimRf: {
      id: number;
      /**
       * Tx (MHz)
       * Format: decimal
       */
      tx_mhz: string;
      /**
       * Rx (MHz)
       * Format: decimal
       */
      rx_mhz: string;
      channel?: string | null;
      band: string;
      mode: string;
      /**
       * Shift (MHz)
       * Format: decimal
       */
      shift_mhz: string;
    };
    /** @description Models enough information for describing TETRA repeaters. */
    DimTetra: {
      id: number;
      mcc: number;
      mnc: number;
    };
    /** @description Models a repeater's full information. */
    FactRepeater: {
      id: number;
      info_rf?: components["schemas"]["DimRf"];
      info_fm?: components["schemas"]["DimFm"];
      info_dstar?: components["schemas"]["DimDstar"];
      info_fusion?: components["schemas"]["DimFusion"];
      info_dmr?: components["schemas"]["DimDmr"];
      info_holder?: components["schemas"]["Association"];
      info_location?: components["schemas"]["DimLocation"];
      info_tetra?: components["schemas"]["DimTetra"];
      callsign: string;
      notes?: string;
      /** Pwr. (W) */
      pwr_w?: number | null;
      status?: components["schemas"]["StatusEnum"];
      sysop?: string;
      modes: readonly components["schemas"]["ModesEnum"][];
    };
    Login: {
      username?: string;
      /** Format: email */
      email?: string;
      password: string;
    };
    /**
     * @description * `fm` - FM
     * * `dmr` - DMR
     * * `dstar` - D-Star
     * * `fusion` - Fusion
     * * `tetra` - TETRA
     * @enum {string}
     */
    ModesEnum: "fm" | "dmr" | "dstar" | "fusion" | "tetra";
    PaginatedAssociationList: {
      /** @example 123 */
      count?: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=400&limit=100
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=200&limit=100
       */
      previous?: string | null;
      results?: components["schemas"]["Association"][];
    };
    PaginatedDimDmrList: {
      /** @example 123 */
      count?: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=400&limit=100
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=200&limit=100
       */
      previous?: string | null;
      results?: components["schemas"]["DimDmr"][];
    };
    PaginatedDimDmrTgList: {
      /** @example 123 */
      count?: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=400&limit=100
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=200&limit=100
       */
      previous?: string | null;
      results?: components["schemas"]["DimDmrTg"][];
    };
    PaginatedDimDstarList: {
      /** @example 123 */
      count?: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=400&limit=100
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=200&limit=100
       */
      previous?: string | null;
      results?: components["schemas"]["DimDstar"][];
    };
    PaginatedDimFmList: {
      /** @example 123 */
      count?: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=400&limit=100
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=200&limit=100
       */
      previous?: string | null;
      results?: components["schemas"]["DimFm"][];
    };
    PaginatedDimFusionList: {
      /** @example 123 */
      count?: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=400&limit=100
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=200&limit=100
       */
      previous?: string | null;
      results?: components["schemas"]["DimFusion"][];
    };
    PaginatedDimLocationList: {
      /** @example 123 */
      count?: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=400&limit=100
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=200&limit=100
       */
      previous?: string | null;
      results?: components["schemas"]["DimLocation"][];
    };
    PaginatedDimRfList: {
      /** @example 123 */
      count?: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=400&limit=100
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=200&limit=100
       */
      previous?: string | null;
      results?: components["schemas"]["DimRf"][];
    };
    PaginatedDimTetraList: {
      /** @example 123 */
      count?: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=400&limit=100
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=200&limit=100
       */
      previous?: string | null;
      results?: components["schemas"]["DimTetra"][];
    };
    PaginatedFactRepeaterList: {
      /** @example 123 */
      count?: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=400&limit=100
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=200&limit=100
       */
      previous?: string | null;
      results?: components["schemas"]["FactRepeater"][];
    };
    /** @description Serializer for the passcode. */
    Passcode: {
      passcode: string;
    };
    PasswordChange: {
      new_password1: string;
      new_password2: string;
    };
    /** @description Serializer for requesting a password reset e-mail. */
    PasswordReset: {
      /** Format: email */
      email: string;
    };
    /** @description Serializer for confirming a password reset attempt. */
    PasswordResetConfirm: {
      new_password1: string;
      new_password2: string;
      uid: string;
      token: string;
    };
    /** @description Models enough information for describing a ham radio association. */
    PatchedAssociation: {
      id?: number;
      /** Abrv. */
      abrv?: string;
      name?: string;
      /**
       * E-mail
       * Format: email
       */
      email?: string;
      /** Format: uri */
      website?: string;
      notes?: string;
    };
    /** @description Models enough information for describing DMR repeaters. */
    PatchedDimDmr: {
      id?: number;
      tg?: components["schemas"]["DimDmrTg"];
      ts1_default_tg?: components["schemas"]["DimDmrTg"];
      ts2_default_tg?: components["schemas"]["DimDmrTg"];
      ts1_alternative_tgs?: components["schemas"]["DimDmrTg"][];
      ts2_alternative_tgs?: components["schemas"]["DimDmrTg"][];
      /** C.C. */
      color_code?: number;
      /** TS config. */
      ts_configuration?: string;
    };
    /** @description Models enough information for describing a DMR TG. */
    PatchedDimDmrTg: {
      /** DMR ID */
      id?: number;
      name?: string;
      call_mode?: components["schemas"]["CallModeEnum"];
    };
    /** @description Models enough information for describing D-STAR repeaters. */
    PatchedDimDstar: {
      id?: number;
      gateway?: string;
      reflector?: string;
    };
    /** @description Models enough information for describing FM repeaters. */
    PatchedDimFm: {
      id?: number;
      modulation?: string;
      /** Format: decimal */
      tone?: string | null;
      bandwidth?: components["schemas"]["BandwidthEnum"];
    };
    /** @description Models enough information for describing Fusion/C4FM repeaters. */
    PatchedDimFusion: {
      id?: number;
      wiresx?: string;
      room_id?: string;
    };
    /** @description Models enough information for describing a repeater's location. */
    PatchedDimLocation: {
      id?: number;
      /** Format: decimal */
      latitude?: string | null;
      /** Format: decimal */
      longitude?: string | null;
      region?: components["schemas"]["RegionEnum"];
      place?: string;
      /** QTH loc. */
      qth_loc?: string;
    };
    /** @description Models the frequency information of repeaters. */
    PatchedDimRf: {
      id?: number;
      /**
       * Tx (MHz)
       * Format: decimal
       */
      tx_mhz?: string;
      /**
       * Rx (MHz)
       * Format: decimal
       */
      rx_mhz?: string;
      channel?: string | null;
      band?: string;
      mode?: string;
      /**
       * Shift (MHz)
       * Format: decimal
       */
      shift_mhz?: string;
    };
    /** @description Models enough information for describing TETRA repeaters. */
    PatchedDimTetra: {
      id?: number;
      mcc?: number;
      mnc?: number;
    };
    /** @description Models a repeater's full information. */
    PatchedFactRepeater: {
      id?: number;
      info_rf?: components["schemas"]["DimRf"];
      info_fm?: components["schemas"]["DimFm"];
      info_dstar?: components["schemas"]["DimDstar"];
      info_fusion?: components["schemas"]["DimFusion"];
      info_dmr?: components["schemas"]["DimDmr"];
      info_holder?: components["schemas"]["Association"];
      info_location?: components["schemas"]["DimLocation"];
      info_tetra?: components["schemas"]["DimTetra"];
      callsign?: string;
      notes?: string;
      /** Pwr. (W) */
      pwr_w?: number | null;
      status?: components["schemas"]["StatusEnum"];
      sysop?: string;
      modes?: readonly components["schemas"]["ModesEnum"][];
    };
    /** @description User model w/o password */
    PatchedUserDetails: {
      /** ID */
      pk?: number;
      /** @description Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. */
      username?: string;
      /**
       * Email address
       * Format: email
       */
      email?: string;
      first_name?: string;
      last_name?: string;
    };
    /**
     * @description * `CPT` - Continental PT
     * * `AZR` - Azores
     * * `MDA` - Madeira
     * * `OT` - other
     * @enum {string}
     */
    RegionEnum: "CPT" | "AZR" | "MDA" | "OT";
    RestAuthDetail: {
      detail: string;
    };
    /**
     * @description * `OFF` - off
     * * `ON` - on
     * * `PROJECT` - project
     * * `PROBLEMS` - problems
     * * `OT` - other
     * @enum {string}
     */
    StatusEnum: "OFF" | "ON" | "PROJECT" | "PROBLEMS" | "OT";
    /** @description Serializer for Token model. */
    Token: {
      key: string;
    };
    /** @description User model w/o password */
    UserDetails: {
      /** ID */
      pk: number;
      /** @description Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. */
      username: string;
      /**
       * Email address
       * Format: email
       */
      email: string;
      first_name?: string;
      last_name?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * @description Check the credentials and return the REST Token
   * if the credentials are valid and authenticated.
   * Calls Django Auth login method to register User ID
   * in Django session framework
   *
   * Accept the following POST parameters: username, password
   * Return the REST Framework Token Object's key.
   */
  auth_login_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["Login"];
        "application/x-www-form-urlencoded": components["schemas"]["Login"];
        "multipart/form-data": components["schemas"]["Login"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Token"];
        };
      };
    };
  };
  /**
   * @description Calls Django logout method and delete the Token object
   * assigned to the current User object.
   *
   * Accepts/Returns nothing.
   */
  auth_logout_create: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["RestAuthDetail"];
        };
      };
    };
  };
  /**
   * @description Calls Django Auth SetPasswordForm save method.
   *
   * Accepts the following POST parameters: new_password1, new_password2
   * Returns the success/fail message.
   */
  auth_password_change_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PasswordChange"];
        "application/x-www-form-urlencoded": components["schemas"]["PasswordChange"];
        "multipart/form-data": components["schemas"]["PasswordChange"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["RestAuthDetail"];
        };
      };
    };
  };
  /**
   * @description Calls Django Auth PasswordResetForm save method.
   *
   * Accepts the following POST parameters: email
   * Returns the success/fail message.
   */
  auth_password_reset_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PasswordReset"];
        "application/x-www-form-urlencoded": components["schemas"]["PasswordReset"];
        "multipart/form-data": components["schemas"]["PasswordReset"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["RestAuthDetail"];
        };
      };
    };
  };
  /**
   * @description Password reset e-mail link is confirmed, therefore
   * this resets the user's password.
   *
   * Accepts the following POST parameters: token, uid,
   *     new_password1, new_password2
   * Returns the success/fail message.
   */
  auth_password_reset_confirm_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PasswordResetConfirm"];
        "application/x-www-form-urlencoded": components["schemas"]["PasswordResetConfirm"];
        "multipart/form-data": components["schemas"]["PasswordResetConfirm"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["RestAuthDetail"];
        };
      };
    };
  };
  /**
   * @description Reads and updates UserModel fields
   * Accepts GET, PUT, PATCH methods.
   *
   * Default accepted fields: username, first_name, last_name
   * Default display fields: pk, username, email, first_name, last_name
   * Read-only fields: pk, email
   *
   * Returns UserModel fields.
   */
  auth_user_retrieve: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserDetails"];
        };
      };
    };
  };
  /**
   * @description Reads and updates UserModel fields
   * Accepts GET, PUT, PATCH methods.
   *
   * Default accepted fields: username, first_name, last_name
   * Default display fields: pk, username, email, first_name, last_name
   * Read-only fields: pk, email
   *
   * Returns UserModel fields.
   */
  auth_user_update: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserDetails"];
        "application/x-www-form-urlencoded": components["schemas"]["UserDetails"];
        "multipart/form-data": components["schemas"]["UserDetails"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserDetails"];
        };
      };
    };
  };
  /**
   * @description Reads and updates UserModel fields
   * Accepts GET, PUT, PATCH methods.
   *
   * Default accepted fields: username, first_name, last_name
   * Default display fields: pk, username, email, first_name, last_name
   * Read-only fields: pk, email
   *
   * Returns UserModel fields.
   */
  auth_user_partial_update: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedUserDetails"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedUserDetails"];
        "multipart/form-data": components["schemas"]["PatchedUserDetails"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserDetails"];
        };
      };
    };
  };
  /**
   * @description OpenApi3 schema for this API. Format can be selected via content negotiation.
   *
   * - YAML: application/vnd.oai.openapi
   * - JSON: application/vnd.oai.openapi+json
   */
  schema_retrieve: {
    parameters: {
      query?: {
        format?: "json" | "yaml";
        lang?: "af" | "ar" | "ar-dz" | "ast" | "az" | "be" | "bg" | "bn" | "br" | "bs" | "ca" | "ckb" | "cs" | "cy" | "da" | "de" | "dsb" | "el" | "en" | "en-au" | "en-gb" | "eo" | "es" | "es-ar" | "es-co" | "es-mx" | "es-ni" | "es-ve" | "et" | "eu" | "fa" | "fi" | "fr" | "fy" | "ga" | "gd" | "gl" | "he" | "hi" | "hr" | "hsb" | "hu" | "hy" | "ia" | "id" | "ig" | "io" | "is" | "it" | "ja" | "ka" | "kab" | "kk" | "km" | "kn" | "ko" | "ky" | "lb" | "lt" | "lv" | "mk" | "ml" | "mn" | "mr" | "ms" | "my" | "nb" | "ne" | "nl" | "nn" | "os" | "pa" | "pl" | "pt" | "pt-br" | "ro" | "ru" | "sk" | "sl" | "sq" | "sr" | "sr-latn" | "sv" | "sw" | "ta" | "te" | "tg" | "th" | "tk" | "tr" | "tt" | "udm" | "uk" | "ur" | "uz" | "vi" | "zh-hans" | "zh-hant";
      };
    };
    responses: {
      200: {
        content: {
          "application/vnd.oai.openapi": {
            [key: string]: unknown;
          };
          "application/yaml": {
            [key: string]: unknown;
          };
          "application/vnd.oai.openapi+json": {
            [key: string]: unknown;
          };
          "application/json": {
            [key: string]: unknown;
          };
        };
      };
    };
  };
  /** @description Get the APRS passcode from a callsign */
  v1_aprs_passcode_generator_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["Callsign"];
        "application/x-www-form-urlencoded": components["schemas"]["Callsign"];
        "multipart/form-data": components["schemas"]["Callsign"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Passcode"];
        };
      };
    };
  };
  /** @description ViewSet for Association model. */
  v1_associations_association_list: {
    parameters: {
      query?: {
        abrv__icontains?: string;
        abrv__iexact?: string;
        /** @description Holder contains */
        holder?: string;
        /** @description Number of results to return per page. */
        limit?: number;
        name__icontains?: string;
        name__iexact?: string;
        /** @description The initial index from which to return the results. */
        offset?: number;
        /** @description Which field to use when ordering the results. */
        ordering?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedAssociationList"];
        };
      };
    };
  };
  /**
   * @description Create a list of model instances if a list is provided or a
   * single model instance otherwise.
   */
  v1_associations_association_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["Association"];
        "application/x-www-form-urlencoded": components["schemas"]["Association"];
        "multipart/form-data": components["schemas"]["Association"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Association"];
        };
      };
    };
  };
  /** @description ViewSet for Association model. */
  v1_associations_association_retrieve: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this Association. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Association"];
        };
      };
    };
  };
  /** @description ViewSet for Association model. */
  v1_associations_association_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this Association. */
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Association"];
        "application/x-www-form-urlencoded": components["schemas"]["Association"];
        "multipart/form-data": components["schemas"]["Association"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Association"];
        };
      };
    };
  };
  /** @description ViewSet for Association model. */
  v1_associations_association_destroy: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this Association. */
        id: number;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
    };
  };
  /** @description ViewSet for Association model. */
  v1_associations_association_partial_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this Association. */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedAssociation"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedAssociation"];
        "multipart/form-data": components["schemas"]["PatchedAssociation"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Association"];
        };
      };
    };
  };
  /** @description ViewSet for DimDmr model. */
  v1_repeaters_dim_dmr_list: {
    parameters: {
      query?: {
        /** @description Number of results to return per page. */
        limit?: number;
        /** @description The initial index from which to return the results. */
        offset?: number;
        /** @description Which field to use when ordering the results. */
        ordering?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedDimDmrList"];
        };
      };
    };
  };
  /**
   * @description Create a list of model instances if a list is provided or a
   * single model instance otherwise.
   */
  v1_repeaters_dim_dmr_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["DimDmr"];
        "application/x-www-form-urlencoded": components["schemas"]["DimDmr"];
        "multipart/form-data": components["schemas"]["DimDmr"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["DimDmr"];
        };
      };
    };
  };
  /** @description ViewSet for DimDmrTg model. */
  v1_repeaters_dim_dmr_tg_list: {
    parameters: {
      query?: {
        /** @description Number of results to return per page. */
        limit?: number;
        /** @description The initial index from which to return the results. */
        offset?: number;
        /** @description Which field to use when ordering the results. */
        ordering?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedDimDmrTgList"];
        };
      };
    };
  };
  /**
   * @description Create a list of model instances if a list is provided or a
   * single model instance otherwise.
   */
  v1_repeaters_dim_dmr_tg_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["DimDmrTg"];
        "application/x-www-form-urlencoded": components["schemas"]["DimDmrTg"];
        "multipart/form-data": components["schemas"]["DimDmrTg"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["DimDmrTg"];
        };
      };
    };
  };
  /** @description ViewSet for DimDmrTg model. */
  v1_repeaters_dim_dmr_tg_retrieve: {
    parameters: {
      path: {
        /** @description A unique value identifying this info - DMR TG. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DimDmrTg"];
        };
      };
    };
  };
  /** @description ViewSet for DimDmrTg model. */
  v1_repeaters_dim_dmr_tg_update: {
    parameters: {
      path: {
        /** @description A unique value identifying this info - DMR TG. */
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DimDmrTg"];
        "application/x-www-form-urlencoded": components["schemas"]["DimDmrTg"];
        "multipart/form-data": components["schemas"]["DimDmrTg"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DimDmrTg"];
        };
      };
    };
  };
  /** @description ViewSet for DimDmrTg model. */
  v1_repeaters_dim_dmr_tg_destroy: {
    parameters: {
      path: {
        /** @description A unique value identifying this info - DMR TG. */
        id: number;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
    };
  };
  /** @description ViewSet for DimDmrTg model. */
  v1_repeaters_dim_dmr_tg_partial_update: {
    parameters: {
      path: {
        /** @description A unique value identifying this info - DMR TG. */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedDimDmrTg"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedDimDmrTg"];
        "multipart/form-data": components["schemas"]["PatchedDimDmrTg"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DimDmrTg"];
        };
      };
    };
  };
  /** @description ViewSet for DimDmr model. */
  v1_repeaters_dim_dmr_retrieve: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this info - DMR. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DimDmr"];
        };
      };
    };
  };
  /** @description ViewSet for DimDmr model. */
  v1_repeaters_dim_dmr_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this info - DMR. */
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DimDmr"];
        "application/x-www-form-urlencoded": components["schemas"]["DimDmr"];
        "multipart/form-data": components["schemas"]["DimDmr"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DimDmr"];
        };
      };
    };
  };
  /** @description ViewSet for DimDmr model. */
  v1_repeaters_dim_dmr_destroy: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this info - DMR. */
        id: number;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
    };
  };
  /** @description ViewSet for DimDmr model. */
  v1_repeaters_dim_dmr_partial_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this info - DMR. */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedDimDmr"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedDimDmr"];
        "multipart/form-data": components["schemas"]["PatchedDimDmr"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DimDmr"];
        };
      };
    };
  };
  /** @description ViewSet for DimDstar model. */
  v1_repeaters_dim_dstar_list: {
    parameters: {
      query?: {
        /** @description Number of results to return per page. */
        limit?: number;
        /** @description The initial index from which to return the results. */
        offset?: number;
        /** @description Which field to use when ordering the results. */
        ordering?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedDimDstarList"];
        };
      };
    };
  };
  /**
   * @description Create a list of model instances if a list is provided or a
   * single model instance otherwise.
   */
  v1_repeaters_dim_dstar_create: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["DimDstar"];
        "application/x-www-form-urlencoded": components["schemas"]["DimDstar"];
        "multipart/form-data": components["schemas"]["DimDstar"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["DimDstar"];
        };
      };
    };
  };
  /** @description ViewSet for DimDstar model. */
  v1_repeaters_dim_dstar_retrieve: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this info - D-STAR. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DimDstar"];
        };
      };
    };
  };
  /** @description ViewSet for DimDstar model. */
  v1_repeaters_dim_dstar_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this info - D-STAR. */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["DimDstar"];
        "application/x-www-form-urlencoded": components["schemas"]["DimDstar"];
        "multipart/form-data": components["schemas"]["DimDstar"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DimDstar"];
        };
      };
    };
  };
  /** @description ViewSet for DimDstar model. */
  v1_repeaters_dim_dstar_destroy: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this info - D-STAR. */
        id: number;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
    };
  };
  /** @description ViewSet for DimDstar model. */
  v1_repeaters_dim_dstar_partial_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this info - D-STAR. */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedDimDstar"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedDimDstar"];
        "multipart/form-data": components["schemas"]["PatchedDimDstar"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DimDstar"];
        };
      };
    };
  };
  /** @description ViewSet for DimFm model. */
  v1_repeaters_dim_fm_list: {
    parameters: {
      query?: {
        /** @description Number of results to return per page. */
        limit?: number;
        /** @description The initial index from which to return the results. */
        offset?: number;
        /** @description Which field to use when ordering the results. */
        ordering?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedDimFmList"];
        };
      };
    };
  };
  /**
   * @description Create a list of model instances if a list is provided or a
   * single model instance otherwise.
   */
  v1_repeaters_dim_fm_create: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["DimFm"];
        "application/x-www-form-urlencoded": components["schemas"]["DimFm"];
        "multipart/form-data": components["schemas"]["DimFm"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["DimFm"];
        };
      };
    };
  };
  /** @description ViewSet for DimFm model. */
  v1_repeaters_dim_fm_retrieve: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this info - FM. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DimFm"];
        };
      };
    };
  };
  /** @description ViewSet for DimFm model. */
  v1_repeaters_dim_fm_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this info - FM. */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["DimFm"];
        "application/x-www-form-urlencoded": components["schemas"]["DimFm"];
        "multipart/form-data": components["schemas"]["DimFm"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DimFm"];
        };
      };
    };
  };
  /** @description ViewSet for DimFm model. */
  v1_repeaters_dim_fm_destroy: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this info - FM. */
        id: number;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
    };
  };
  /** @description ViewSet for DimFm model. */
  v1_repeaters_dim_fm_partial_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this info - FM. */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedDimFm"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedDimFm"];
        "multipart/form-data": components["schemas"]["PatchedDimFm"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DimFm"];
        };
      };
    };
  };
  /** @description ViewSet for DimFusion model. */
  v1_repeaters_dim_fusion_list: {
    parameters: {
      query?: {
        /** @description Number of results to return per page. */
        limit?: number;
        /** @description The initial index from which to return the results. */
        offset?: number;
        /** @description Which field to use when ordering the results. */
        ordering?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedDimFusionList"];
        };
      };
    };
  };
  /**
   * @description Create a list of model instances if a list is provided or a
   * single model instance otherwise.
   */
  v1_repeaters_dim_fusion_create: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["DimFusion"];
        "application/x-www-form-urlencoded": components["schemas"]["DimFusion"];
        "multipart/form-data": components["schemas"]["DimFusion"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["DimFusion"];
        };
      };
    };
  };
  /** @description ViewSet for DimFusion model. */
  v1_repeaters_dim_fusion_retrieve: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this info - Fusion/C4FM. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DimFusion"];
        };
      };
    };
  };
  /** @description ViewSet for DimFusion model. */
  v1_repeaters_dim_fusion_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this info - Fusion/C4FM. */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["DimFusion"];
        "application/x-www-form-urlencoded": components["schemas"]["DimFusion"];
        "multipart/form-data": components["schemas"]["DimFusion"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DimFusion"];
        };
      };
    };
  };
  /** @description ViewSet for DimFusion model. */
  v1_repeaters_dim_fusion_destroy: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this info - Fusion/C4FM. */
        id: number;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
    };
  };
  /** @description ViewSet for DimFusion model. */
  v1_repeaters_dim_fusion_partial_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this info - Fusion/C4FM. */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedDimFusion"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedDimFusion"];
        "multipart/form-data": components["schemas"]["PatchedDimFusion"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DimFusion"];
        };
      };
    };
  };
  /** @description ViewSet for DimLocation model. */
  v1_repeaters_dim_location_list: {
    parameters: {
      query?: {
        latitude?: number;
        latitude__gte?: number;
        latitude__lte?: number;
        /** @description Number of results to return per page. */
        limit?: number;
        longitude?: number;
        longitude__gte?: number;
        longitude__lte?: number;
        /** @description The initial index from which to return the results. */
        offset?: number;
        /** @description Which field to use when ordering the results. */
        ordering?: string;
        place__icontains?: string;
        place__iexact?: string;
        qth_loc__icontains?: string;
        qth_loc__iexact?: string;
        region__iexact?: string;
        /** @description Regions (,-separated) */
        regions?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedDimLocationList"];
        };
      };
    };
  };
  /**
   * @description Create a list of model instances if a list is provided or a
   * single model instance otherwise.
   */
  v1_repeaters_dim_location_create: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["DimLocation"];
        "application/x-www-form-urlencoded": components["schemas"]["DimLocation"];
        "multipart/form-data": components["schemas"]["DimLocation"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["DimLocation"];
        };
      };
    };
  };
  /** @description ViewSet for DimLocation model. */
  v1_repeaters_dim_location_retrieve: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this info - location. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DimLocation"];
        };
      };
    };
  };
  /** @description ViewSet for DimLocation model. */
  v1_repeaters_dim_location_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this info - location. */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["DimLocation"];
        "application/x-www-form-urlencoded": components["schemas"]["DimLocation"];
        "multipart/form-data": components["schemas"]["DimLocation"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DimLocation"];
        };
      };
    };
  };
  /** @description ViewSet for DimLocation model. */
  v1_repeaters_dim_location_destroy: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this info - location. */
        id: number;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
    };
  };
  /** @description ViewSet for DimLocation model. */
  v1_repeaters_dim_location_partial_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this info - location. */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedDimLocation"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedDimLocation"];
        "multipart/form-data": components["schemas"]["PatchedDimLocation"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DimLocation"];
        };
      };
    };
  };
  /** @description ViewSet for DimRf model. */
  v1_repeaters_dim_rf_list: {
    parameters: {
      query?: {
        band__iexact?: string;
        /** @description Bands (,-separated) */
        bands?: string;
        channel__icontains?: string;
        channel__iexact?: string;
        /** @description Frequency (MHz) */
        freq_mhz?: number;
        /** @description Frequency (MHz) is greater than or equal to */
        freq_mhz__gte?: number;
        /** @description Frequency (MHz) is less than or equal to */
        freq_mhz__lte?: number;
        /** @description Number of results to return per page. */
        limit?: number;
        mode__icontains?: string;
        mode__iexact?: string;
        /** @description Modes (,-separated) */
        modes?: string;
        /** @description The initial index from which to return the results. */
        offset?: number;
        /** @description Which field to use when ordering the results. */
        ordering?: string;
        rx_mhz?: number;
        rx_mhz__gte?: number;
        rx_mhz__lte?: number;
        tx_mhz?: number;
        tx_mhz__gte?: number;
        tx_mhz__lte?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedDimRfList"];
        };
      };
    };
  };
  /**
   * @description Create a list of model instances if a list is provided or a
   * single model instance otherwise.
   */
  v1_repeaters_dim_rf_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["DimRf"];
        "application/x-www-form-urlencoded": components["schemas"]["DimRf"];
        "multipart/form-data": components["schemas"]["DimRf"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["DimRf"];
        };
      };
    };
  };
  /** @description ViewSet for DimRf model. */
  v1_repeaters_dim_rf_retrieve: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this info - RF. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DimRf"];
        };
      };
    };
  };
  /** @description ViewSet for DimRf model. */
  v1_repeaters_dim_rf_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this info - RF. */
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DimRf"];
        "application/x-www-form-urlencoded": components["schemas"]["DimRf"];
        "multipart/form-data": components["schemas"]["DimRf"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DimRf"];
        };
      };
    };
  };
  /** @description ViewSet for DimRf model. */
  v1_repeaters_dim_rf_destroy: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this info - RF. */
        id: number;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
    };
  };
  /** @description ViewSet for DimRf model. */
  v1_repeaters_dim_rf_partial_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this info - RF. */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedDimRf"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedDimRf"];
        "multipart/form-data": components["schemas"]["PatchedDimRf"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DimRf"];
        };
      };
    };
  };
  /** @description ViewSet for DimTetra model. */
  v1_repeaters_dim_tetra_list: {
    parameters: {
      query?: {
        /** @description Number of results to return per page. */
        limit?: number;
        /** @description The initial index from which to return the results. */
        offset?: number;
        /** @description Which field to use when ordering the results. */
        ordering?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedDimTetraList"];
        };
      };
    };
  };
  /**
   * @description Create a list of model instances if a list is provided or a
   * single model instance otherwise.
   */
  v1_repeaters_dim_tetra_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["DimTetra"];
        "application/x-www-form-urlencoded": components["schemas"]["DimTetra"];
        "multipart/form-data": components["schemas"]["DimTetra"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["DimTetra"];
        };
      };
    };
  };
  /** @description ViewSet for DimTetra model. */
  v1_repeaters_dim_tetra_retrieve: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this info - TETRA. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DimTetra"];
        };
      };
    };
  };
  /** @description ViewSet for DimTetra model. */
  v1_repeaters_dim_tetra_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this info - TETRA. */
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DimTetra"];
        "application/x-www-form-urlencoded": components["schemas"]["DimTetra"];
        "multipart/form-data": components["schemas"]["DimTetra"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DimTetra"];
        };
      };
    };
  };
  /** @description ViewSet for DimTetra model. */
  v1_repeaters_dim_tetra_destroy: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this info - TETRA. */
        id: number;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
    };
  };
  /** @description ViewSet for DimTetra model. */
  v1_repeaters_dim_tetra_partial_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this info - TETRA. */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedDimTetra"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedDimTetra"];
        "multipart/form-data": components["schemas"]["PatchedDimTetra"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DimTetra"];
        };
      };
    };
  };
  /** @description ViewSet for FactRepeater model. */
  v1_repeaters_fact_repeater_list: {
    parameters: {
      query?: {
        callsign__icontains?: string;
        callsign__iexact?: string;
        info_dmr__tg__id?: number;
        info_dmr__tg__name__icontains?: string;
        info_dmr__tg__name__iexact?: string;
        info_dmr__ts1_default_tg__id?: number;
        info_dmr__ts1_default_tg__name__icontains?: string;
        info_dmr__ts1_default_tg__name__iexact?: string;
        info_dmr__ts2_default_tg__id?: number;
        info_dmr__ts2_default_tg__name__icontains?: string;
        info_dmr__ts2_default_tg__name__iexact?: string;
        info_dstar__gateway__iexact?: string;
        info_dstar__reflector__iexact?: string;
        info_fm__bandwidth__iexact?: string;
        info_fm__modulation__icontains?: string;
        info_fm__modulation__iexact?: string;
        info_fm__tone?: number;
        info_fusion__room_id__iexact?: string;
        info_fusion__wiresx__iexact?: string;
        info_holder__abrv__icontains?: string;
        info_holder__abrv__iexact?: string;
        /** @description Holder contains */
        info_holder__holder?: string;
        info_holder__name__icontains?: string;
        info_holder__name__iexact?: string;
        info_location__latitude?: number;
        info_location__latitude__gte?: number;
        info_location__latitude__lte?: number;
        info_location__longitude?: number;
        info_location__longitude__gte?: number;
        info_location__longitude__lte?: number;
        info_location__place__icontains?: string;
        info_location__place__iexact?: string;
        info_location__qth_loc__iexact?: string;
        info_location__region__iexact?: string;
        /** @description Regions (,-separated) */
        info_location__regions?: string;
        info_rf__band__iexact?: string;
        /** @description Bands (,-separated) */
        info_rf__bands?: string;
        info_rf__channel__iexact?: string;
        /** @description Frequency (MHz) */
        info_rf__freq_mhz_search?: number;
        /** @description Frequency (MHz) is greater than or equal to */
        info_rf__freq_mhz_search__gte?: number;
        /** @description Frequency (MHz) is less than or equal to */
        info_rf__freq_mhz_search__lte?: number;
        info_rf__mode__iexact?: string;
        /** @description RF modes (,-separated) */
        info_rf__modes?: string;
        info_rf__rx_mhz?: number;
        info_rf__rx_mhz__gte?: number;
        info_rf__rx_mhz__lte?: number;
        info_rf__shift_mhz?: number;
        info_rf__shift_mhz__gte?: number;
        info_rf__shift_mhz__lte?: number;
        info_rf__tx_mhz?: number;
        info_rf__tx_mhz__gte?: number;
        info_rf__tx_mhz__lte?: number;
        info_tetra__mcc?: number;
        info_tetra__mcc__gte?: number;
        info_tetra__mcc__lte?: number;
        info_tetra__mnc?: number;
        info_tetra__mnc__gte?: number;
        info_tetra__mnc__lte?: number;
        /** @description Number of results to return per page. */
        limit?: number;
        /** @description Modulation modes, (,-separated) */
        modes?: string;
        notes__icontains?: string;
        /** @description The initial index from which to return the results. */
        offset?: number;
        /** @description Which field to use when ordering the results. */
        ordering?: string;
        pwr_w?: number;
        pwr_w__gte?: number;
        pwr_w__lte?: number;
        sysop__icontains?: string;
        sysop__iexact?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedFactRepeaterList"];
        };
      };
    };
  };
  /**
   * @description Create a list of model instances if a list is provided or a
   * single model instance otherwise.
   */
  v1_repeaters_fact_repeater_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["FactRepeater"];
        "application/x-www-form-urlencoded": components["schemas"]["FactRepeater"];
        "multipart/form-data": components["schemas"]["FactRepeater"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["FactRepeater"];
        };
      };
    };
  };
  /** @description ViewSet for FactRepeater model. */
  v1_repeaters_fact_repeater_retrieve: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this repeater. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["FactRepeater"];
        };
      };
    };
  };
  /** @description ViewSet for FactRepeater model. */
  v1_repeaters_fact_repeater_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this repeater. */
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["FactRepeater"];
        "application/x-www-form-urlencoded": components["schemas"]["FactRepeater"];
        "multipart/form-data": components["schemas"]["FactRepeater"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["FactRepeater"];
        };
      };
    };
  };
  /** @description ViewSet for FactRepeater model. */
  v1_repeaters_fact_repeater_destroy: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this repeater. */
        id: number;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
    };
  };
  /** @description ViewSet for FactRepeater model. */
  v1_repeaters_fact_repeater_partial_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this repeater. */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedFactRepeater"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedFactRepeater"];
        "multipart/form-data": components["schemas"]["PatchedFactRepeater"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["FactRepeater"];
        };
      };
    };
  };
}
